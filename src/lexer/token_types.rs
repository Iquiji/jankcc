#[derive(Debug, Clone, PartialEq, Eq)]
pub enum CTokenType {
    Keyword(CKeyword),
    Constant,
    Comparision,
    Symbol,
    Identifier,
}

#[allow(clippy::upper_case_acronyms)]
#[allow(unused)]
#[derive(Debug, Clone, PartialEq, Eq)]
pub enum CKeyword {
    AUTO,
    BREAK,
    CASE,
    CHAR,
    CONST,
    CONTINUE,
    DEFAULT,
    DO,
    DOUBLE,
    ELSE,
    ENUM,
    EXTERN,
    FLOAT,
    FOR,
    GOTO,
    IF,
    INLINE,
    INT,
    LONG,
    REGISTER,
    RESTRICT,
    RETURN,
    SHORT,
    SIGNED,
    SIZEOF,
    STATIC,
    STRUCT,
    SWITCH,
    TYPEDEF,
    UNION,
    UNSIGNED,
    VOID,
    VOLATILE,
    WHILE,
    // _ALIGNAS,
    // _ALIGNOF,
    // _ATOMIC,
    // _BOOL,
    // _COMPLEX,
    // _GENERIC,
    // _IMAGINARY,
    // _NORETURN,
    // _STATIC_ASSERT,
    // _THREAD_LOCAL,
}
impl CKeyword {
    pub fn to_keyword(string: &str) -> Option<CKeyword> {
        use CKeyword::*;

        match string.to_ascii_uppercase().as_str() {
            "AUTO" => Some(AUTO),
            "BREAK" => Some(BREAK),
            "CASE" => Some(CASE),
            "CHAR" => Some(CHAR),
            "CONST" => Some(CONST),
            "CONTINUE" => Some(CONTINUE),
            "DEFAULT" => Some(DEFAULT),
            "DO" => Some(DO),
            "DOUBLE" => Some(DOUBLE),
            "ELSE" => Some(ELSE),
            "ENUM" => Some(ENUM),
            "EXTERN" => Some(EXTERN),
            "FLOAT" => Some(FLOAT),
            "FOR" => Some(FOR),
            "GOTO" => Some(GOTO),
            "IF" => Some(IF),
            "INLINE" => Some(INLINE),
            "INT" => Some(INT),
            "LONG" => Some(LONG),
            "REGISTER" => Some(REGISTER),
            "RESTRICT" => Some(RESTRICT),
            "RETURN" => Some(RETURN),
            "SHORT" => Some(SHORT),
            "SIGNED" => Some(SIGNED),
            "SIZEOF" => Some(SIZEOF),
            "STATIC" => Some(STATIC),
            "STRUCT" => Some(STRUCT),
            "SWITCH" => Some(SWITCH),
            "TYPEDEF" => Some(TYPEDEF),
            "UNION" => Some(UNION),
            "UNSIGNED" => Some(UNSIGNED),
            "VOID" => Some(VOID),
            "VOLATILE" => Some(VOLATILE),
            "WHILE" => Some(WHILE),
            _ => None,
        }
    }
}
